@inherits LayoutComponentBase
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager navigation
@inject MudBlazor.ISnackbar snackBar
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider auth
<MudLayout>
	<MudAppBar Style="background-color: #F9E5A4;" Dense="true">
		<MudMenu FullWidth="true" Label="Chỉnh Sửa Dữ Liệu" Style="text-transform:none" Variant="Variant.Text" Color="Color.Primary" ActivationEvent="@MouseEvent.MouseOver" OffsetY AnchorOrigin="@Origin.TopCenter" TransformOrigin="@Origin.BottomCenter" Dense="true" Size="Size.Medium">
			<MudMenuItem Href="denghicapquyen" Style="font-size:x-small;">Đề Nghị Cấp Quyền</MudMenuItem>
			<MudDivider/>
			<MudMenuItem Href="dexuatchinhsuadulieu">Chỉnh Sửa Dữ Liệu</MudMenuItem>
		</MudMenu>
		<MudSpacer />
		<AuthorizeView>
			<Authorized>
				<MudMenu StartIcon="@Icons.Material.Filled.Person" Color="Color.Primary" Label=@context.User.Identity.Name>
					<MudMenuItem Icon="@Icons.Material.Filled.Person" Href="/profile?tab=0" Size="Size.Small" Color="Color.Inherit">Profile</MudMenuItem>
					<MudMenuItem Icon="@Icons.Material.Filled.ExitToApp" Href="/logout" Size="Size.Small" Color="Color.Inherit">Log Out</MudMenuItem>
				</MudMenu>
				<MudMenu StartIcon="@Icons.Material.Filled.Email" Size="Size.Medium" Color="Color.Primary" />
			</Authorized>
			<NotAuthorized>
				<a href="login" style="color: #304FFE; font-style: oblique; ">Login</a>
			</NotAuthorized>
		</AuthorizeView>
	</MudAppBar>
	<MudDrawer Elevation="4" @bind-Open="@_drawerOpen">
		<NavMenu />
	</MudDrawer>
	<MudPaper>
		<MudMainContent>
			@Body
		</MudMainContent>
	</MudPaper>
</MudLayout>
<MudThemeProvider Theme="MyCustomTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />
@code {
	bool _drawerOpen = true;

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}
	MudTheme MyCustomTheme = new MudTheme()
	{

		LayoutProperties = new LayoutProperties
		{
			DrawerWidthLeft = "280px"
		},
		Typography = new Typography
		{
			Default = new Default
			{
				FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
				FontSize = "0.8 rem",
				FontWeight = 200,
				LineHeight = 0.8,
				LetterSpacing = ".0055em"
			}
		}
	};
	[Inject]
	public AuthenticationStateProvider AccessTokenProvider { get; set; }
	[Inject]
	public AccessTokenStorage storage { get; set; }
	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine();
		var user = "";
		var checkAuth = await auth.GetAuthenticationStateAsync();
		if (checkAuth != null)
		{
			user = checkAuth.User.Identity.Name;
		}
		else
		{
			Console.WriteLine("Authen nulll");
		}
	}
}
